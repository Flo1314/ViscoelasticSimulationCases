/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  7.0                                   |
|   \\  /    A nd           | Website:  https://openfoam.org                  |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 0.1; //mm -> cm

vertices // can be defined in arbitrary order
(
  // left vertices
  (0  0  4) // 0
  (0  0  3) // 1
  (0  0  0) // 2
  (0  1  4) // 3
  (0  1  3) // 4
  (0  1  0) // 5
  (0  4  4) // 6
  (0  4  3) // 7
  (0  4  0) // 8

  // center vertices
  (8  0  4) // 9
  (8  0  3) // 10
  (8  0  0) // 11
  (8  1  4) // 12
  (8  1  3) // 13
  (8  1  0) // 14
  (8  4  4) // 15
  (8  4  3) // 16
  (8  4  0) // 17

  // right vertices
  (16 0 4) // 18
  (16 0 3) // 19
  (16 1 4) // 20
  (16 1 3) // 21
);

blocks // vertices of blocks must follow a certain order
(
    // using mesh refinement such that cells are uniform
    hex (0 9 10 1 3 12 13 4)     (32  4  4) simpleGrading (1 1 1)
    hex (3 12 13 4 6 15 16 7)    (32  4 12) simpleGrading (1 1 1)
    hex (4 13 14 5 7 16 17 8)    (32 12 12) simpleGrading (1 1 1)
    hex (1 10 11 2 4 13 14 5)    (32 12  4) simpleGrading (1 1 1)
    hex (9 18 19 10 12 20 21 13) (32  4  4) simpleGrading (1 1 1)
);

edges
(
);

boundary // vertices in faces are ordered clockwise, viewed from inside the block
(
     inlet
     {
        type patch;
        faces
        (
            (0 3 4 1) // left part normal to x
            (1 4 5 2)
	    (3 6 7 4)
	    (4 7 8 5)
        );
    }

    outlet
    {
        type patch;
        faces
        (
            (19 21 20 18) // right part normal to x
        );
    }

    walls
    {
        type wall;
        faces
        (
            (0 9 12 3) // left part normal to y or z
            (3 12 15 6)
            (6 15 16 7)
	    (7 16 17 8)
	    (8 17 14 5)
	    (5 14 11 2)
	    (16 15 12 13) // center part normal to x
	    (17 16 13 14)
	    (14 13 10 11)
	    (9 18 20 12) // right part normal to y or z
	    (12 20 21 13)
	    (13 21 19 10)
        );
    }
  
    bottom
    {
        type symmetryPlane;
        faces
        (
            (1 10 9 0) // bottom normal to z
            (2 11 10 1)
	    (10 19 18 9)
        );
    }  
);

mergePatchPairs
(
);

// ************************************************************************* //
